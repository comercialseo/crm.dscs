; Sample Configuration File
;
; Any constants defined in your application environment that are file paths
; will be automatically available in your configuration files under the same
; name.

; Define an extension type.
;
; _filters, _targets and other keys prefixed with this value
; are connected when the ini file is parsed.
;
; * cachePath - is where built files will be output
; * timestamp - Set to true to add a timestamp to build files.
; * paths - An array of paths where files used in builds can be found
;   Supports glob expressions. Paths should be slash terminated.
; * filters - A list of filters to be applied to all build files
;   using this extension. You can use absolute class names, to pull
;   filters in from your application, or use short names when using filters
;   provided by mini-asset.
; * baseUrl - Set the base url this type of asset is served off of, good
;   for using with CDN's
[js]
baseUrl = http://cdn.example.com
timestamp = true
paths[] = WEBROOT/js/*
cachePath = WEBROOT/cache_js/
filters[] = Sprockets
filters[] = YuiJs

; Filter prefixed sections allow you to redefine
; any of the settings available in any filter.
;
[filter_Uglifyjs]
node = /usr/bin/node

; Each target should have a section defining the files
; everything after js_* is considered the build file.
; all files included in the build are relative to the parent
; paths key.
;
; Targets can include their own filters.
;
; Files in targets can be one of the follow:
;
; * Relative file names - These files are located on the `paths[]=`
;   options.
; * Remote file names - These are URLs starting with http or https.
; * Glob expressions - Glob expressions are expanded and the results
;   are added to the list of files for the target.
; * Callbacks - Any static function can be used as a 'provider' for
;   a targets files.
[libs.js]
files[] = jquery.js
files[] = mootools.js
files[] = class.js
filters[] = UglifyJs

; Build targets can 'extend' other targets.
; When a target extends another target, all the `files`
; `filters` and `paths` are inherited from the 'parent' target.
; The extending targets components are appended to the parents.
; You can have assets extend to any depth that is necessary.
[extended.js]
extend = libs.js
files[] = extended.js

; Build targets can 'require' another target.
; When a target requires another target, the required target is
; compiled including filter application, and used as a source
; file for the new build.
[dependent.js]
require = extended.js
files[] = drop/lib.js

; Create the CSS extension
; See the `[js]` section above for valid options.
[css]
paths[] = WEBROOT/css/*
cachePath = WEBROOT/cache_css/

[all.css]
files[] = layout.css
filters[] = CssMinFilter
